Common Structures
=================

template <typename T>
struct Vector
{
    uint32_t length;
    T data[];
};

struct String
{
    uint8_t length;
    char[] data;
};

struct Vertex
{
    glm::vec3 position;
    glm::vec3 normal;
    glm::vec2 texcoord;
};

struct Material
{
    String name;
    String baseColorTexture;
};

Level File
==========

struct Face
{
    uint8_t vert_count;
    int32_t vertices[]; // indices into vertex array in Mesh
};

struct Mesh
{
    Material material;
    Vector<Vertex> vertices;
    Vector<Face> faces;
};

struct LevelFile
{
    Vector<Mesh> meshes;
};

Entity File
===========

struct Triangle
{
    uint32_t vertices[3]; // indices into vertex array in Mesh
};

struct Mesh
{
    Material material;
    Vector<Vertex> vertices;
    Vector<Triangle> triangles;
};

struct Transform
{
    glm::quat rotation;
    glm::vec3 scale;
    glm::vec3 translation;
};

struct Channel
{
    enum class PathType : uint8_t
    {
        Rotation = 0,
        Translation = 1,
        Scale = 2
    };
    PathType path;
    uint32_t startFrame;
    uint32_t endFrame;
    char data[]; // list of glm::vec3 for path=Scale/Translation or glm::quat for path=Rotation
};

struct Action
{
    String name;
    Vector<Channel> channels;
};

struct Node
{
    String name;
    enum Type : uint8_t
    {
        Empty = 0,
        MeshSet = 1,
    };
    Type type;
    Transform transform;
    Vector<uint32_t> childIndices; // indexes into node array in Entity
    Vector<Action> actions;
};

struct MeshSetNode : Node
{
    Vector<Mesh> meshes;
};

struct EntityFile
{
    Vector<Node> nodes;
    Vector<Animation> animations;
};
